#!/usr/bin/env sh

# it would be nice to find out how to or modify packages such that
# i can embed the go/rust/etc. version into their help when building

git_version () {
    git describe --tags --exact-match 2>/dev/null || \
        printf %s\\n "git-$(git describe --always --dirty)"
}

if [ "$1" = "build" ]; then
    shift
    for pkg in "$@"; do
        bins="$pkg"
        case "$pkg" in
        micro|fastmod|fd|srv|direnv|usermount|fzy|vape|tokei)
            cd "src/${pkg}"
            make
            ;;
        ripgrep)
            cd src/ripgrep
            make
            bins=rg
            ;;
        tmux)
            cd src/tmux
            make -j"$(nproc)" || {
                sh autogen.sh
                CC=gcc CFLAGS="-g0 -O3 -flto -march=native" ./configure
                make clean
                make -j"$(nproc)"
            }
            strip tmux
            ;;
        ncdu)
            cd src/ncdu
            make -j"$(nproc)" || {
                autoreconf -i
                CC=clang CFLAGS="-g0 -O3 -flto -march=native" ./configure
                make clean
                make -j"$(nproc)"
            }
            strip ncdu
            ;;
        sym-prototype)
            cd src/sym-prototype
            bins=sym
            ;;
        pulsemixer)
            cd src/pulsemixer
            ;;
        ydiff)
            cd src/ydiff
            ln -s ydiff.py git-ydiff
            bins=git-ydiff
            ;;
        volta)
            cd src/volta
            make
            bins='volta volta-shim volta-migrate'
            ;;
        alacritty)
            cd src/alacritty
            # TODO: macos vs. linux conditionals
            # under linux, would like to build with only wayland feature
            make
            bins=alacritty-bin
            # macos only (needed to launch from spotlight)
            cat <<EOF > "${bin}.command"
#!/bin/sh
"${PWD}/${bin}" &
disown && exit 0
EOF
            chmod u+x "${bin}.command"
            ;;
        *)
            echo "package ${pkg} not found"
            continue
        esac

        v="$(git_version)"
        cd -
        for bin in $bins; do
            rm -f "${bin}-"*
            ln -sv "src/${pkg}/${bin}" "${bin}-${v}"
            ln -svf "${bin}-${v}" "$bin"
        done
    done
fi
